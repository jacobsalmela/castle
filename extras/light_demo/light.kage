//go:build ignore

//kage:unit pixels

package main

var (
	Apply   float
	Texture float
	Cursor  vec2
	Time    float
)

func rand(co vec2) float {
	return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453)
}

func Fragment(dstPos vec4, srcPos vec2, color vec4) vec4 {
	lightDir := normalize(vec3(Cursor, 50) - vec3(dstPos.xy-imageDstOrigin(), 0))
	normalColor := imageSrc1At(srcPos)
	if Apply == 0 {
		normalColor.xyz = vec3(0.5, 0.5, 1)
	}
	normalColor.y = 1 - normalColor.y
	normal := normalize(normalColor - 0.5)
	const ambient = 0.25
	const lightResolution = 12
	diffuse := (1 - ambient) * max(dot(normal.xyz, lightDir), 0.0)

	diffuse += (cos(Time*1.5) + ((rand(vec2(Time, Time)) - 0.5) * 0.4)) * 0.01
	randcomp := 1 + (rand(srcPos)-0.5)*0.03
	diffuse *= randcomp

	diffuse = (floor(lightResolution*diffuse) / lightResolution)
	if Texture == 1 {
		return vec4(diffuse, diffuse, diffuse, 1)
	}

	return imageSrc0At(srcPos) * (ambient + diffuse)
}

/*
// https://godotshaders.com/shader/2d-fire-effect-with-colour-banding/
uniform vec4 color1;
uniform vec4 color2;
uniform sampler2D noise;

uniform float flickerT = 0.6;

vec4 lerp(vec4 col1, vec4 col2, float t) {
	float r = (col2.r - col1.r) * t + col1.r;
	float g = (col2.g - col1.g) * t + col1.g;
	float b = (col2.b - col1.b) * t + col1.b;
	return vec4(r, g, b, col1.a);
}

void fragment() {
	COLOR = lerp(color1, color2, texture(noise, UV).r);
	float dist = 1.0 - sqrt(pow(UV.x - 0.5, 2.0) + pow(UV.y - 0.5, 2.0));
	float flickerValue = texture(noise, vec2(TIME, (TIME) * 0.9)).r;
	if (flickerValue > flickerT) {
		dist *= flickerValue / (1.0 - flickerT) * 0.62;
	}
	COLOR.a *= dist + cos(UV.x * 10.0 + TIME) * 0.02 + cos(TIME * 2.0 * 2.0) * 0.03;
	COLOR.a = (COLOR.a * (2.0) + texture(noise, vec2(UV.x * -0.1 + TIME * -0.1, UV.y) * 4.0).r) / 2.0;
	COLOR.a = round(COLOR.a * 20.0) / 20.0;
	COLOR.a = clamp(COLOR.a, 0.0, 1.0);
}
*/
